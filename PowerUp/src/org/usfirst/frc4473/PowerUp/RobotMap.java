// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4473.PowerUp;

import edu.wpi.cscore.UsbCamera;
import edu.wpi.first.wpilibj.CameraServer;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.DigitalInput;
import edu.wpi.first.wpilibj.Encoder;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.Spark;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Drive
    public static SpeedController driveLeftVic;
    public static SpeedController driveRightVic;
    public static DifferentialDrive driveroboDrive;
    public static Encoder driveEncLeft;
    public static Encoder driveEncRight;
    public static ADIS16448_IMU imu;
    // Claw
    public static Compressor armgrabbyCompressor;
    public static Solenoid hug;
    // Claw Lift
    public static SpeedController liftSpark;
    public static DigitalInput liftHigh;
    public static DigitalInput liftLow;
    // Climb Lift
    public static SpeedController climbliftVic;
    public static DigitalInput climbliftHigh;
    public static DigitalInput climbliftLow;
    // Cameras
    public static UsbCamera camera1;
    //public static UsbCamera camera2;
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    @SuppressWarnings("deprecation") //Removes yellow lines
	public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    	// Drive
        driveLeftVic = new VictorSP(0);
        //LiveWindow.addActuator("drive", "leftDriveSpark", (Spark) driveleftDriveSpark);
        driveLeftVic.setInverted(false);
        
        driveRightVic = new VictorSP(1);
       // LiveWindow.addActuator("drive", "rightDriveSpark", (Spark) driverightDriveSpark);
        driveRightVic.setInverted(false);
        
        driveroboDrive = new DifferentialDrive(driveLeftVic, driveRightVic);
        
        driveroboDrive.setSafetyEnabled(true);
        driveroboDrive.setExpiration(0.1);
        driveroboDrive.setMaxOutput(1.0);

        //TODO: Copied from Steamworks. May need to tweak this value
    	double dEncDistancePerPulse = ( ( 6*Math.PI ) / 360 );
    	
        driveEncLeft = new Encoder(2,3,true, Encoder.EncodingType.k2X);
        driveEncLeft.setDistancePerPulse(dEncDistancePerPulse);
        SmartDashboard.putData("encoderLeft", driveEncLeft); 
        
        driveEncRight = new Encoder(0,1,false, Encoder.EncodingType.k2X);
        driveEncRight.setDistancePerPulse(dEncDistancePerPulse);
        SmartDashboard.putData("encoderRight", driveEncRight); 

        imu = new ADIS16448_IMU();
        imu.reset(); 
        
        // Claw
        armgrabbyCompressor = new Compressor(); //Values to check
        armgrabbyCompressor.setClosedLoopControl(true);
        hug = new Solenoid(0); //Values to check
        
        // Claw Lift
        liftSpark = new Spark(2);
        //LiveWindow.addActuator("lift", "liftVic", (VictorSP) liftVic);
        liftSpark.setInverted(false);
        
        liftHigh = new DigitalInput(8);
        //LiveWindow.addSensor("LiftSystem", "lsHigh", liftHigh);
        liftLow = new DigitalInput(9);
        //LiveWindow.addSensor("LiftSystem", "lsLow", liftLow);
        
        // Climb Lift
        climbliftVic = new Spark(3);
        //LiveWindow.addActuator("ClimbLift", "climbliftVic", (VictorSP) climbliftSpark);
        climbliftVic.setInverted(false);
        
        climbliftHigh = new DigitalInput(7);
        //LiveWindow.addSensor("ClimbSystem", "lsHigh", climbliftHigh);
        climbliftLow = new DigitalInput(6);
        //LiveWindow.addSensor("ClimbSystem", "lsHigh", climbliftLow);
        
        // Cameras
        camera1 = CameraServer.getInstance().startAutomaticCapture(0);
        //camera2 = CameraServer.getInstance().startAutomaticCapture(1);
        
        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}