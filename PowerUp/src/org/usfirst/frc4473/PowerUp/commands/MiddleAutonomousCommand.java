// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4473.PowerUp.commands;
import edu.wpi.first.wpilibj.DriverStation;
import edu.wpi.first.wpilibj.command.Command;
import edu.wpi.first.wpilibj.command.CommandGroup;

import org.usfirst.frc4473.PowerUp.Robot;
import org.usfirst.frc4473.PowerUp.RobotMap;
import edu.wpi.first.wpilibj.Timer;
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

/**
 *
 */
public class MiddleAutonomousCommand extends CommandGroup {

    public MiddleAutonomousCommand() {
        // Add Commands here:
        // e.g. addSequential(new Command1());
        //      addSequential(new Command2());
        // these will run in order.

        // To run multiple commands at the same time,
        // use addParallel()
        // e.g. addParallel(new Command1());
        //      addSequential(new Command2());
        // Command1 and Command2 will run in parallel.

        // A command group will require all of the subsystems that each member
        // would require.
        // e.g. if Command1 requires chassis, and Command2 requires arm,
        // a CommandGroup containing them would require both the chassis and the
        // arm.
    	
    	String gameData = DriverStation.getInstance().getGameSpecificMessage();
    	if(gameData.length() > 0)
        {
    		SmartDashboard.putString("AutonomousCommand", "Middle");  
    		// commands common to both switch positions
			//this.addSequential(new driveToDistance(12));
			SmartDashboard.putString("gameData", gameData);
    		
    		if(switchIsOnLeft(gameData))
    		{	
    			//Add commands unique to switch on Left
    			this.addSequential(new turnToAngle(-90));
    			//this.addSequential(new driveToDistance(40));
    			//this.addSequential(new turnToAngle(0));
    		}
    		else 
    		{
    			//Add commands unique to switch on Right
    			//this.addSequential(new turnToAngle(90));
    			//this.addSequential(new driveToDistance(30));
    			//this.addSequential(new turnToAngle(0));
    		}
    		// commands common to both switch positions
    		//this.addSequential(new switchHeight());
			//this.addSequential(new driveToDistance(40));
    		//this.addSequential(new grabRelease());
		} 
		else 
		{
			//Something's messed up. Add command for just crossing the line
			//this.addSequential(new driveToDistance(120));
			SmartDashboard.putString("gameData", "no data");
		}
    }
    
    private boolean switchIsOnLeft(String gameData) {
    	return (gameData.charAt(0) == 'L');
    }
}