// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4473.PowerUp.subsystems;

import org.usfirst.frc4473.PowerUp.ADIS16448_IMU;
import org.usfirst.frc4473.PowerUp.Robot;
import org.usfirst.frc4473.PowerUp.RobotMap;
import org.usfirst.frc4473.PowerUp.commands.driveTank;

import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	public int counter = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	// Local references to robot components
    private final DifferentialDrive roboDrive = RobotMap.driveroboDrive;
    private final ADIS16448_IMU imu = RobotMap.imu;
    private final Encoder driveEncLeft = RobotMap.driveEncLeft;
    private final Encoder driveEncRight = RobotMap.driveEncRight;
    
    
    private double maxSpeedLeft = 0.0;
    private double maxSpeedRight = 0.0;
    
//    private double dLRawDriveSpeed;
//    private double dRRawDriveSpeed;
    
//    private double EncRatio = 1.0;
    
    private double voltLeft;
    private double voltRight;
    private double leftVoltCount = 0;
    private double rightVoltCount = 0;
//    private double leftSpeed;
//    private double rightSpeed;
    
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public void turn90Right() {
    	while(imu.getAngleZ() <= 90) 
    	{
    		roboDrive.tankDrive(0.75, -0.75);
    	}
    }
    public void turn90Left() {
    	while(imu.getAngleZ() <= 90) 
    	{
    		roboDrive.tankDrive(-0.75, 0.75);
    	}
    }
    
    public void driveAtAngle(double speed, double targetAngle) {
    	double rotation = 0;
    	
    	double scaleFactor = 0.03; // Might need to tweak this value. Should be fast without oscillating.
    	
    	double angle = imu.getAngleZ();
    	
    	// Note: while target angle might be +/-360, getAngleZ is continuous and allows for angles > 360
    	// Also, target angle might be different but equivalent to the current angle (e.g. -90 and +270)
    	rotation = (targetAngle - angle) * scaleFactor;

        SmartDashboard.putNumber("rotation",rotation);
        SmartDashboard.putNumber("speed",speed);
    	
    	roboDrive.arcadeDrive(speed, rotation);
    }
    
    public void rotate(double rotation) {
    	rotation = Math.max(rotation, -1);
    	rotation = Math.min(rotation, 1);
    	
    	SmartDashboard.putNumber("rotation",rotation);
        SmartDashboard.putNumber("AngleFrom0", imu.getAngleZ());
        
    	roboDrive.arcadeDrive(0, rotation);
    	
    }
    
//    public void driveAuto()
//    {
//    	SmartDashboard.putString("DriveCounter", (Integer.toString(counter++)) );
//    	if(Robot.driveEncLeft.getRate() != 0.0)// && Math.floorMod(counter, 5)==0)
//    	{
//    		EncRatio = Math.abs(Robot.driveEncRight.getRate() / Robot.driveEncLeft.getRate());
//    		EncRatio = Math.abs(Robot.driveEncLeft.getRate() / Robot.driveEncRight.getRate());
//    	}
//    	SmartDashboard.putNumber("EncoderRatio", EncRatio);
//    	roboDrive.tankDrive(0.6, 0.6);
//    }
    
    public void takeJoystickInput(Joystick leftstick, Joystick rightstick) 
    {
    	roboDrive.tankDrive(leftstick.getRawAxis(1), rightstick.getRawAxis(1));
    	
    	if (driveEncLeft.getRate() >= maxSpeedLeft)
    	{
    		maxSpeedLeft = driveEncLeft.getRate();
    	}
    	if (driveEncRight.getRate() >= maxSpeedRight)
    	{
    		maxSpeedRight = driveEncRight.getRate();
    	}
    	SmartDashboard.putNumber("GyroX", imu.getAngleX());
    	SmartDashboard.putNumber("GyroY", imu.getAngleY());
    	SmartDashboard.putNumber("GyroZ", imu.getAngleZ());
    	//SmartDashboard.putString("maxSpeedLeft", (Double.toString(maxSpeedLeft)) );
    	//SmartDashboard.putString("maxSpeedRight", (Double.toString(maxSpeedRight)) );

    }

    public void stop() 
    {
    	roboDrive.tankDrive(0, 0);
    }

    public void initDefaultCommand() {
    	setDefaultCommand(new driveTank());
    }
    
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
    public void straight()
    {
	    if (driveEncLeft.getRate() < 3000)
	    {
	        leftVoltCount += 0.01;
	    }
	    if (driveEncLeft.getRate() > 3000)
	    {
		    leftVoltCount -= 0.01;
	    }
	    if (driveEncRight.getRate() < 3000)
	    {
		    rightVoltCount += 0.01;
	    }
	    if (driveEncRight.getRate() < 3000)
	    {
		    rightVoltCount -= 0.01;
	    }
	   	   
	    voltLeft = 0.5 + leftVoltCount;
	    voltRight = 0.5 + rightVoltCount; 
	    roboDrive.tankDrive(voltLeft, voltRight);
	   
	    //SmartDashboard.putString("leftvoltage", voltLeft);
    }
    public void straightJoysticks() //numbers for conversion need to be calibrated as well as increment numbers(0.01)
    {
	    double leftSpeed = Robot.oi.leftStick.getRawAxis(1) * 40;
	    double rightSpeed = Robot.oi.rightStick.getRawAxis(1) * 40;
	    
	    if (driveEncLeft.getRate() < leftSpeed)
	    {
		    leftVoltCount += 0.01;
	    }
	    if (driveEncLeft.getRate() > leftSpeed)
	    {
		    leftVoltCount -= 0.01;
	    }
	    if (driveEncRight.getRate() < rightSpeed)
	    {
		    rightVoltCount += 0.01;
	    }
	    if (driveEncRight.getRate() < rightSpeed)
	    {
		    rightVoltCount -= 0.01;
	    }
	   	   
	    voltLeft = Robot.oi.leftStick.getRawAxis(1) + leftVoltCount;
	    voltRight = Robot.oi.rightStick.getRawAxis(1) + rightVoltCount; 
	    roboDrive.tankDrive(voltLeft, voltRight);
    }

     // Put methods for controlling this subsystem
     // here. Call these from Commands.

    public double getAngle() {
    	return imu.getAngleZ();
    }
    public void resetDistance() {
    	driveEncLeft.reset();
    	driveEncRight.reset();
    }
    public double getDistance() {
    	double avgDistance = (Math.abs(driveEncLeft.getDistance()) + Math.abs(driveEncRight.getDistance())) / 2; 
    	
    	return avgDistance;
    }
}

