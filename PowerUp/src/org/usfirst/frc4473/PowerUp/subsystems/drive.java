// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4473.PowerUp.subsystems;

import org.usfirst.frc4473.PowerUp.Robot;
import org.usfirst.frc4473.PowerUp.RobotMap;
import org.usfirst.frc4473.PowerUp.commands.driveTank;
import edu.wpi.first.wpilibj.Joystick;
import edu.wpi.first.wpilibj.command.Subsystem;
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.drive.DifferentialDrive;
import edu.wpi.first.wpilibj.smartdashboard.SmartDashboard;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS


/**
 *
 */
public class drive extends Subsystem {

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
	public int counter = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    private final DifferentialDrive roboDrive = RobotMap.driveroboDrive;
    
    double maxSpeedLeft = 0.0;
    double maxSpeedRight = 0.0;
    
    public double dLRawDriveSpeed;
    public double dRRawDriveSpeed;
    
    public boolean IsAuto = false; 
    public double EncRatio = 1.0;
    
    public double voltLeft;
    public double voltRight;
    public double leftVoltCount = 0;
    public double rightVoltCount = 0;
    public double leftSpeed;
    public double rightSpeed;
    
    
    
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    
    public void turn90Right() {
    	while(Robot.imu.getAngleZ() <= 90) 
    	{
    		roboDrive.tankDrive(0.75, -0.75);
    	}
    }
    public void turn90Left() {
    	while(Robot.imu.getAngleZ() <= 90) 
    	{
    		roboDrive.tankDrive(-0.75, 0.75);
    	}
    }
    public void driveStraightForward() {
    	//roboDrive.tankDrive(leftstick.getRawAxis(1), rightstick.getRawAxis(1));
    	/*if (Robot.driveEncLeft.getRate() <= maxSpeedLeft)
    	{
    		maxSpeedLeft = Robot.driveEncLeft.getRate();
    	}
    	if (Robot.driveEncRight.getRate() <= maxSpeedRight)
    	{
    		maxSpeedRight = Robot.driveEncRight.getRate();
    	}
    	SmartDashboard.putString("maxSpeedLeft", (Double.toString(maxSpeedLeft)) );
    	SmartDashboard.putString("maxSpeedRight", (Double.toString(maxSpeedRight)) ); */
    	roboDrive.tankDrive(-0.8, -0.8); 
    }
    public void driveStraightReverse() {
    	//roboDrive.tankDrive(leftstick.getRawAxis(1), rightstick.getRawAxis(1));
    	/*if (Robot.driveEncLeft.getRate() >= maxSpeedLeft)
    	{
    		maxSpeedLeft = Robot.driveEncLeft.getRate();
    	}
    	if (Robot.driveEncRight.getRate() >= maxSpeedRight)
    	{
    		maxSpeedRight = Robot.driveEncRight.getRate();
    	}
    	SmartDashboard.putString("maxSpeedLeft", (Double.toString(maxSpeedLeft)) );
    	SmartDashboard.putString("maxSpeedRight", (Double.toString(maxSpeedRight)) ); */
    	roboDrive.tankDrive(0.8, 0.8);
    }
    private void driveStraight(int direction) {
    	double baseSpeed = 0.6 * direction;
    	
    	// TODO: Figure out how to compensate for uneven motors
    	if(Robot.driveEncLeft.getRate() != 0.0)// && Math.floorMod(counter, 5)==0)
    	{
    		EncRatio = Math.abs(Robot.driveEncRight.getRate() / Robot.driveEncLeft.getRate());
    		//EncRatio = Math.abs(Robot.driveEncLeft.getRate() / Robot.driveEncRight.getRate());
    	}
    	SmartDashboard.putNumber("EncoderRatio", EncRatio);
    	
    	roboDrive.tankDrive(baseSpeed, baseSpeed);
    }
    
    public void driveAuto()
    {
    	SmartDashboard.putString("DriveCounter", (Integer.toString(counter++)) );
//    	if(Robot.driveEncLeft.getRate() != 0.0)// && Math.floorMod(counter, 5)==0)
//    	{
//    		EncRatio = Math.abs(Robot.driveEncRight.getRate() / Robot.driveEncLeft.getRate());
//    		EncRatio = Math.abs(Robot.driveEncLeft.getRate() / Robot.driveEncRight.getRate());
//    	}
//    	SmartDashboard.putNumber("EncoderRatio", EncRatio);
//    	roboDrive.tankDrive(0.6, 0.6);
    }
    public void takeJoystickInput(Joystick leftstick, Joystick rightstick) 
    {
    	roboDrive.tankDrive(leftstick.getRawAxis(1), rightstick.getRawAxis(1));
    	if (Robot.driveEncLeft.getRate() >= maxSpeedLeft)
    	{
    		maxSpeedLeft = Robot.driveEncLeft.getRate();
    	}
    	if (Robot.driveEncRight.getRate() >= maxSpeedRight)
    	{
    		maxSpeedRight = Robot.driveEncRight.getRate();
    	}
    	SmartDashboard.putNumber("GyroX", Robot.imu.getAngleX());
    	SmartDashboard.putNumber("GyroY", Robot.imu.getAngleY());
    	SmartDashboard.putNumber("GyroZ", Robot.imu.getAngleZ());
    	//SmartDashboard.putString("maxSpeedLeft", (Double.toString(maxSpeedLeft)) );
    	//SmartDashboard.putString("maxSpeedRight", (Double.toString(maxSpeedRight)) );

    }
    public void stop() 
    {
    	roboDrive.tankDrive(0, 0);
    }

    public void initDefaultCommand() {
    	setDefaultCommand(new driveTank());
    }
    @Override
    public void periodic() {
        // Put code here to be run every loop

    }
    
   public void straight()
   {
	   if (Robot.driveEncLeft.getRate() < 3000)
	   {
		   leftVoltCount += 0.01;
	   }
	   if (Robot.driveEncLeft.getRate() > 3000)
	   {
		   leftVoltCount -= 0.01;
	   }
	   if (Robot.driveEncRight.getRate() < 3000)
	   {
		   rightVoltCount += 0.01;
	   }
	   if (Robot.driveEncRight.getRate() < 3000)
	   {
		   rightVoltCount -= 0.01;
	   }
	   
	   
	   voltLeft = 0.5 + leftVoltCount;
	   voltRight = 0.5 + rightVoltCount; 
	   roboDrive.tankDrive(voltLeft, voltRight);
	   
	   //SmartDashboard.putString("leftvoltage", voltLeft);
   }
   public void straightJoysticks() //numbers for conversion need to be calibrated as well as increment numbers(0.01)
   {
 double leftSpeed = Robot.oi.leftStick.getRawAxis(1) * 40;
 double rightSpeed = Robot.oi.rightStick.getRawAxis(1) * 40;
	   
	   if (Robot.driveEncLeft.getRate() < leftSpeed)
	   {
		   leftVoltCount += 0.01;
	   }
	   if (Robot.driveEncLeft.getRate() > leftSpeed)
	   {
		   leftVoltCount -= 0.01;
	   }
	   if (Robot.driveEncRight.getRate() < rightSpeed)
	   {
		   rightVoltCount += 0.01;
	   }
	   if (Robot.driveEncRight.getRate() < rightSpeed)
	   {
		   rightVoltCount -= 0.01;
	   }
	   
	   
	   voltLeft = Robot.oi.leftStick.getRawAxis(1) + leftVoltCount;
	   voltRight = Robot.oi.rightStick.getRawAxis(1) + rightVoltCount; 
	   roboDrive.tankDrive(voltLeft, voltRight);
   }

    // Put methods for controlling this subsystem
    // here. Call these from Commands.

}

